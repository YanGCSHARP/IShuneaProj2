// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id String @id @default(uuid())
  name String
  userID String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[]@relation ("StoreToOrder")
  sizes Size[] @relation("StoreToSize")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id String@id @default(uuid())
  storeID String
  store Store@relation("StoreToBillboard", fields:[storeID], references: [id])
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeID])
}

model Category{
  id String @id @default(uuid())
  storeID String
  store Store @relation("StoreToCategory", fields:[storeID], references: [id])
  billboardID String
  billboard Billboard @relation(fields:[billboardID], references:[id])
  products Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@index([storeID])
  @@index([billboardID])
}

model Size{
  id String @id @default(uuid())
  storeID String
  store Store @relation("StoreToSize", fields: [storeID], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@index([storeID])
}

model Color{
  id String @id @default(uuid())
  storeID String
  store Store @relation("StoreToColor", fields: [storeID], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@index([storeID])
}

model Product {
  id String @id @default(uuid())
  storeID String
  store Store @relation("StoreToProduct", fields: [storeID], references: [id])
  categoryID String
  category Category @relation("CategoryToProduct", fields: [categoryID], references: [id])
  name String
  price Float
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeID String
  size Size @relation(fields:[sizeID], references: [id])
  colorID String
  color Color @relation(fields: [colorID], references: [id])
  images Image[]
  orderItems OrderItem []
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeID])
  @@index([categoryID])
  @@index([sizeID])
  @@index([colorID])


}

model Image{
  id String @id @default(uuid())
  productID String
  product Product @relation(fields:[productID], references:[id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productID])
}

model Order {
  id String @id @default(uuid())
  storeID String
  store Store @relation("StoreToOrder", fields:[storeID], references:[id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeID])
}

model OrderItem{
  id String @id @default(uuid())
  orderID String
  order Order @relation(fields: [orderID], references: [id])
  productID String
  product Product @relation(fields: [productID], references: [id])

  @@index ([orderID])
  @@index ([productID])
}